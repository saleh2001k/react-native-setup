diff --git a/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h
new file mode 100644
index 0000000..d03a8d2
--- /dev/null
+++ b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h
@@ -0,0 +1,74 @@
+
+/*
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by GenerateRCTThirdPartyFabricComponentsProviderH
+ */
+
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wreturn-type-c-linkage"
+
+#import <React/RCTComponentViewProtocol.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+Class<RCTComponentViewProtocol> RCTThirdPartyFabricComponentsProvider(const char *name);
+#if RCT_NEW_ARCH_ENABLED
+#ifndef RCT_DYNAMIC_FRAMEWORKS
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> AutoLayoutViewCls(void) __attribute__((used)); // 0
+Class<RCTComponentViewProtocol> CellContainerCls(void) __attribute__((used)); // 0
+#endif
+
+Class<RCTComponentViewProtocol> RNGestureHandlerButtonCls(void) __attribute__((used)); // 1
+Class<RCTComponentViewProtocol> RNGestureHandlerRootViewCls(void) __attribute__((used)); // 1
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> KeyboardControllerViewCls(void) __attribute__((used)); // 2
+Class<RCTComponentViewProtocol> KeyboardGestureAreaCls(void) __attribute__((used)); // 2
+Class<RCTComponentViewProtocol> OverKeyboardViewCls(void) __attribute__((used)); // 2
+#endif
+
+#if !TARGET_OS_VISION
+
+#endif
+
+
+#if !TARGET_OS_OSX
+Class<RCTComponentViewProtocol> RNCSafeAreaProviderCls(void) __attribute__((used)); // 5
+Class<RCTComponentViewProtocol> RNCSafeAreaViewCls(void) __attribute__((used)); // 5
+#endif
+
+#if !TARGET_OS_OSX
+Class<RCTComponentViewProtocol> RNSFullWindowOverlayCls(void) __attribute__((used)); // 6
+Class<RCTComponentViewProtocol> RNSModalScreenCls(void) __attribute__((used)); // 6
+Class<RCTComponentViewProtocol> RNSScreenContainerCls(void) __attribute__((used)); // 6
+Class<RCTComponentViewProtocol> RNSScreenContentWrapperCls(void) __attribute__((used)); // 6
+Class<RCTComponentViewProtocol> RNSScreenFooterCls(void) __attribute__((used)); // 6
+Class<RCTComponentViewProtocol> RNSScreenCls(void) __attribute__((used)); // 6
+Class<RCTComponentViewProtocol> RNSScreenNavigationContainerCls(void) __attribute__((used)); // 6
+Class<RCTComponentViewProtocol> RNSScreenStackHeaderConfigCls(void) __attribute__((used)); // 6
+Class<RCTComponentViewProtocol> RNSScreenStackHeaderSubviewCls(void) __attribute__((used)); // 6
+Class<RCTComponentViewProtocol> RNSScreenStackCls(void) __attribute__((used)); // 6
+Class<RCTComponentViewProtocol> RNSSearchBarCls(void) __attribute__((used)); // 6
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+
+#endif
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#pragma GCC diagnostic pop
+
diff --git a/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm
new file mode 100644
index 0000000..67adf53
--- /dev/null
+++ b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm
@@ -0,0 +1,93 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by GenerateRCTThirdPartyFabricComponentsProviderCpp
+ */
+
+// OSS-compatibility layer
+
+#import "RCTThirdPartyFabricComponentsProvider.h"
+
+#import <string>
+#import <unordered_map>
+
+Class<RCTComponentViewProtocol> RCTThirdPartyFabricComponentsProvider(const char *name) {
+  static std::unordered_map<std::string, Class (*)(void)> sFabricComponentsClassMap = {
+    #if RCT_NEW_ARCH_ENABLED
+    #ifndef RCT_DYNAMIC_FRAMEWORKS
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+    {"AutoLayoutView", AutoLayoutViewCls}, // 0
+
+    {"CellContainer", CellContainerCls}, // 0
+#endif
+
+
+    {"RNGestureHandlerButton", RNGestureHandlerButtonCls}, // 1
+
+    {"RNGestureHandlerRootView", RNGestureHandlerRootViewCls}, // 1
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+    {"KeyboardControllerView", KeyboardControllerViewCls}, // 2
+
+    {"KeyboardGestureArea", KeyboardGestureAreaCls}, // 2
+
+    {"OverKeyboardView", OverKeyboardViewCls}, // 2
+#endif
+
+#if !TARGET_OS_VISION
+
+#endif
+
+
+#if !TARGET_OS_OSX
+
+    {"RNCSafeAreaProvider", RNCSafeAreaProviderCls}, // 5
+
+    {"RNCSafeAreaView", RNCSafeAreaViewCls}, // 5
+#endif
+
+#if !TARGET_OS_OSX
+
+    {"RNSFullWindowOverlay", RNSFullWindowOverlayCls}, // 6
+
+    {"RNSModalScreen", RNSModalScreenCls}, // 6
+
+    {"RNSScreenContainer", RNSScreenContainerCls}, // 6
+
+    {"RNSScreenContentWrapper", RNSScreenContentWrapperCls}, // 6
+
+    {"RNSScreenFooter", RNSScreenFooterCls}, // 6
+
+    {"RNSScreen", RNSScreenCls}, // 6
+
+    {"RNSScreenNavigationContainer", RNSScreenNavigationContainerCls}, // 6
+
+    {"RNSScreenStackHeaderConfig", RNSScreenStackHeaderConfigCls}, // 6
+
+    {"RNSScreenStackHeaderSubview", RNSScreenStackHeaderSubviewCls}, // 6
+
+    {"RNSScreenStack", RNSScreenStackCls}, // 6
+
+    {"RNSSearchBar", RNSSearchBarCls}, // 6
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+    #endif
+    #endif
+  };
+
+  auto p = sFabricComponentsClassMap.find(name);
+  if (p != sFabricComponentsClassMap.end()) {
+    auto classFunc = p->second;
+    return classFunc();
+  }
+  return nil;
+}
diff --git a/node_modules/react-native/React/Fabric/Surface/RCTFabricSurface.mm b/node_modules/react-native/React/Fabric/Surface/RCTFabricSurface.mm
index 0567a52..62c3ecd 100644
--- a/node_modules/react-native/React/Fabric/Surface/RCTFabricSurface.mm
+++ b/node_modules/react-native/React/Fabric/Surface/RCTFabricSurface.mm
@@ -142,6 +142,7 @@ - (RCTSurfaceView *)view
 
   if (!_view) {
     _view = [[RCTSurfaceView alloc] initWithSurface:(RCTSurface *)self];
+    [self _updateLayoutContext];
     _touchHandler = [RCTSurfaceTouchHandler new];
     [_touchHandler attachToView:_view];
   }
